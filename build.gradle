import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask

plugins {
    id 'org.jetbrains.kotlin.jvm' apply false
}

subprojects {

    apply plugin: 'org.jetbrains.kotlin.jvm'
    if (project.hasProperty('serialization_version')) {
        apply plugin: 'org.jetbrains.kotlin.plugin.serialization'
    }

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()
    java.withJavadocJar()

    jar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
        manifest {
            attributes([
                    'Specification-Title'     : mod_name,
                    'Specification-Vendor'    : mod_author,
                    'Specification-Version'   : project.jar.archiveVersion,
                    'Implementation-Title'    : project.name,
                    'Implementation-Version'  : project.jar.archiveVersion,
                    'Implementation-Vendor'   : mod_author,
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    'Timestamp'               : System.currentTimeMillis(),
                    'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                    'Built-On-Minecraft'      : minecraft_version
            ])
        }
    }

    sourcesJar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
    }

    repositories {

        mavenCentral()

        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }

        maven {
            name = 'BlameJared Maven (CrT / Bookshelf)'
            url = 'https://maven.blamejared.com'
        }
        maven {
            name 'Tencao Maven'
            url 'https://maven.tencao.com/repository/releases/'
        }
        maven {
            name 'Bluexin'
            url 'https://maven.bluexin.be/repository/releases/'
        }
        maven {
            name 'Sonatype OSSRH (Snapshots)'
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
        ivy {
            // Pulled from https://github.com/MightyPirates/OpenComputers/blob/1c0dc67182292895495cb0d421ec0f529d243d74/build.gradle
            name 'asie dependency mirror'
            artifactPattern "https://asie.pl/javadeps/[module]-[revision](-[classifier]).[ext]"
            metadataSources.artifact()
        }
    }

    configurations {
        shadow {
            transitive = false
        }
        implementation.extendsFrom shadow
    }

    dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-reflect'
        implementation platform("org.jetbrains.kotlinx:kotlinx-coroutines-bom:$coroutines_version")
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm'
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-jdk8'
        if (project.hasProperty('serialization_version')) {
            implementation platform("org.jetbrains.kotlinx:kotlinx-serialization-bom:$serialization_version")
            implementation 'org.jetbrains.kotlinx:kotlinx-serialization-core-jvm'
            implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json-jvm'
        }

        shadow 'be.bluexin.gnu.jel:gnu-jel:2.1.3'
        shadow 'com.helger:ph-css:6.5.0'
        shadow 'com.helger.commons:ph-commons:10.1.6'
        shadow 'org.slf4j:slf4j-api:1.7.36'

        shadow 'net.sandius.rembulan:rembulan-compiler:0.1-SNAPSHOT'
        shadow 'net.sandius.rembulan:rembulan-stdlib:0.1-SNAPSHOT'

        shadow 'org.classdump.luna:luna-all-shaded:0.4.1'

        shadow group: 'none', name: 'OC-LuaJ', version: '20220907.1', ext: 'jar'
        shadow group: 'none', name: 'OC-JNLua', version: '20220928.1', ext: 'jar'
        shadow group: 'none', name: 'OC-JNLua-Natives', version: '20220928.1', ext: 'jar'
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.release = 17
    }

    tasks.withType(KotlinCompilationTask).configureEach {
        compilerOptions {
            javaParameters = true
            jvmTarget = JvmTarget.JVM_17
        }
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata) {

        enabled = false
    }
}
